
//+------------------------------------------------------------------+
//|                Antifragiles\BlackSholes_FMH.mq5         |
//| Hybrid EA: Trend + Mean Reversion + VWAP/EMA + ATR              |
//| Lightweight version - No GUI                                    |
//+------------------------------------------------------------------+
#include <Trade\Trade.mqh>

input int    FastMAPeriod = 20;
input int    SlowMAPeriod = 50;
input int    ATRPeriod    = 14;
input double ATRMultiplier = 1.5;
input double RiskPercent = 1.0;
input double RiskRewardRatio = 2.0;
input bool   EnableTrendLogic = true;
input bool   EnableReversionLogic = true;
input bool   EnableVWAPFilter = true;
input bool   EnableTimeFilter = true;
input bool   EnableTrailingStop = true;
input int    TradingStartHour = 7;
input int    TradingEndHour   = 17;

CTrade trade;
datetime lastTradeTime = 0;

int fast_ma_handle, slow_ma_handle, atr_handle;
double vwap_value;

int OnInit()
{
   fast_ma_handle = iMA(_Symbol, _Period, FastMAPeriod, 0, MODE_EMA, PRICE_CLOSE);
   slow_ma_handle = iMA(_Symbol, _Period, SlowMAPeriod, 0, MODE_EMA, PRICE_CLOSE);
   atr_handle = iATR(_Symbol, _Period, ATRPeriod);
   return(INIT_SUCCEEDED);
}

void OnTick()
{
   if (TimeCurrent() == lastTradeTime) return;
   if (EnableTimeFilter && !IsWithinTradingHours()) return;
   if (PositionSelect(_Symbol)) return;

   double fast_ma[], slow_ma[], atr[];
   if (CopyBuffer(fast_ma_handle, 0, 0, 2, fast_ma) <= 0) return;
   if (CopyBuffer(slow_ma_handle, 0, 0, 2, slow_ma) <= 0) return;
   if (CopyBuffer(atr_handle, 0, 0, 2, atr) <= 0) return;

   double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
   double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
   double price = (ask + bid) / 2.0;
   double sl_dist = atr[0] * ATRMultiplier;
   double lot = CalculateLotSize(sl_dist);

   double sl = 0, tp = 0;

   bool buySignal = false, sellSignal = false;

   // VWAP approximation
   vwap_value = (iHigh(_Symbol, _Period, 0) + iLow(_Symbol, _Period, 0) + iClose(_Symbol, _Period, 0)) / 3.0;

   // Trend logic
   if (EnableTrendLogic) {
      buySignal  = (fast_ma[1] < slow_ma[1] && fast_ma[0] > slow_ma[0]);
      sellSignal = (fast_ma[1] > slow_ma[1] && fast_ma[0] < slow_ma[0]);
   }

   // Mean reversion logic
   if (EnableReversionLogic) {
      double upperBand = slow_ma[0] + atr[0] * ATRMultiplier;
      double lowerBand = slow_ma[0] - atr[0] * ATRMultiplier;
      if (price < lowerBand) buySignal = true;
      if (price > upperBand) sellSignal = true;
   }

   // VWAP filter
   if (EnableVWAPFilter) {
      if (price < vwap_value) buySignal = false;
      if (price > vwap_value) sellSignal = false;
   }

   // Trade execution
   if (buySignal) {
      sl = ask - sl_dist;
      tp = ask + sl_dist * RiskRewardRatio;
      if (trade.Buy(lot, _Symbol, ask, sl, tp)) lastTradeTime = TimeCurrent();
   } else if (sellSignal) {
      sl = bid + sl_dist;
      tp = bid - sl_dist * RiskRewardRatio;
      if (trade.Sell(lot, _Symbol, bid, sl, tp)) lastTradeTime = TimeCurrent();
   }
}

bool IsWithinTradingHours()
{
   MqlDateTime dt;
   TimeToStruct(TimeCurrent(), dt);
   int hour = dt.hour;
   return (hour >= TradingStartHour && hour < TradingEndHour);
}

double CalculateLotSize(double sl_distance)
{
   double balance = AccountInfoDouble(ACCOUNT_BALANCE);
   double risk_amount = balance * RiskPercent / 100.0;
   double tick_value = SymbolInfoDouble(_Symbol, SYMBOL_TRADE_TICK_VALUE);
   double lot = risk_amount / (sl_distance / SymbolInfoDouble(_Symbol, SYMBOL_POINT) * tick_value);
   return NormalizeDouble(lot, 2);
}
