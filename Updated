//+------------------------------------------------------------------+
//|                AntifragileEA_Scalping_CORE_FIXED_v3.mq5         |
//| Hybrid EA: Trend + Mean Reversion + VWAP/EMA + ATR + RSI        |
//| Magic Number Control | Pyramiding | Anchored VWAP               |
//+------------------------------------------------------------------+
#include <Trade\Trade.mqh>

// Strategy Parameters
input int    MagicNumber      = 202406;     // Unique EA identifier
input int    FastMAPeriod     = 20;
input int    SlowMAPeriod     = 50;
input int    ATRPeriod        = 14;
input double Trend_ATRMult    = 1.5;        // Trend ATR Multiplier
input double Reversion_ATRMult= 2.5;        // Reversion ATR Multiplier
input double RiskPercent      = 1.0;
input double Trend_RR         = 2.0;        // Trend Reward/Risk
input double Reversion_RR     = 1.0;        // Reversion Reward/Risk

// Strategy Switches
input bool   EnableTrend      = true;
input bool   EnableReversion  = true;
input int    MaxPyramid       = 3;          // Max trend positions
input int    RSI_Period       = 14;         // RSI confirmation
input int    RSI_OverSold     = 30;
input int    RSI_OverBought   = 70;

// Advanced Filters
input bool   UseAnchoredVWAP  = true;       // Requires custom VWAP
input bool   EnableTimeFilter = true;
input int    TradingStartHour = 7;
input int    TradingEndHour   = 17;

CTrade trade;
datetime lastTradeTime = 0;

// Indicator Handles
int fast_ma_handle, slow_ma_handle, atr_handle, vwap_handle, rsi_handle;

int OnInit()
{
   trade.SetExpertMagicNumber(MagicNumber);
   
   fast_ma_handle = iMA(_Symbol, _Period, FastMAPeriod, 0, MODE_EMA, PRICE_CLOSE);
   slow_ma_handle = iMA(_Symbol, _Period, SlowMAPeriod, 0, MODE_EMA, PRICE_CLOSE);
   atr_handle = iATR(_Symbol, _Period, ATRPeriod);
   rsi_handle = iRSI(_Symbol, _Period, RSI_Period, PRICE_CLOSE);
   
   // Anchored VWAP (requires custom indicator)
   vwap_handle = iCustom(_Symbol, _Period, "AnchoredVWAP", 0, 0); 
   return(INIT_SUCCEEDED);
}

void OnTick()
{
   if(TimeCurrent() == lastTradeTime) return;
   if(EnableTimeFilter && !IsWithinTradingHours()) return;
   
   MqlRates rates[];
   CopyRates(_Symbol, _Period, 0, 1, rates);
   
   // Get indicator values
   double fast_ma[2], slow_ma[2], atr[2], vwap[1], rsi[1];
   CopyBuffer(fast_ma_handle, 0, 0, 2, fast_ma);
   CopyBuffer(slow_ma_handle, 0, 0, 2, slow_ma);
   CopyBuffer(atr_handle, 0, 0, 2, atr);
   CopyBuffer(vwap_handle, 0, 0, 1, vwap);
   CopyBuffer(rsi_handle, 0, 0, 1, rsi);

   double price = rates[0].close;
   bool buySignal = false, sellSignal = false;

   // 1. Trend Following Strategy
   if(EnableTrend && !EnableReversion)
   {
      bool emaCrossUp = fast_ma[1] < slow_ma[1] && fast_ma[0] > slow_ma[0];
      bool emaCrossDown = fast_ma[1] > slow_ma[1] && fast_ma[0] < slow_ma[0];
      
      // Pyramiding logic
      int longPositions = CountPositions(POSITION_TYPE_BUY);
      int shortPositions = CountPositions(POSITION_TYPE_SELL);
      
      if(emaCrossUp && longPositions < MaxPyramid) {
         buySignal = true;
      }
      else if(emaCrossDown && shortPositions < MaxPyramid) {
         sellSignal = true;
      }
   }

   // 2. Mean Reversion Strategy
   if(EnableReversion && !EnableTrend)
   {
      double upperBand = slow_ma[0] + atr[0] * Reversion_ATRMult;
      double lowerBand = slow_ma[0] - atr[0] * Reversion_ATRMult;
      
      // RSI Confirmation
      if(price < lowerBand && rsi[0] < RSI_OverSold) buySignal = true;
      if(price > upperBand && rsi[0] > RSI_OverBought) sellSignal = true;
   }

   // 3. VWAP Filter
   if(UseAnchoredVWAP)
   {
      if(buySignal && price < vwap[0]) buySignal = false;
      if(sellSignal && price > vwap[0]) sellSignal = false;
   }

   // Execute trades with magic number check
   if(buySignal && !HasOpenPosition(POSITION_TYPE_BUY)) {
      double sl = price - (atr[0] * (EnableTrend ? Trend_ATRMult : Reversion_ATRMult));
      double tp = price + (atr[0] * (EnableTrend ? Trend_ATRMult : Reversion_ATRMult) * 
                    (EnableTrend ? Trend_RR : Reversion_RR));
      double lot = CalculateLotSize(MathAbs(price - sl));
      trade.Buy(lot, _Symbol, price, sl, tp, "Trend Entry");
      lastTradeTime = TimeCurrent();
   }
   else if(sellSignal && !HasOpenPosition(POSITION_TYPE_SELL)) {
      double sl = price + (atr[0] * (EnableTrend ? Trend_ATRMult : Reversion_ATRMult));
      double tp = price - (atr[0] * (EnableTrend ? Trend_ATRMult : Reversion_ATRMult) * 
                    (EnableTrend ? Trend_RR : Reversion_RR));
      double lot = CalculateLotSize(MathAbs(price - sl));
      trade.Sell(lot, _Symbol, price, sl, tp, "Reversion Entry");
      lastTradeTime = TimeCurrent();
   }
}

//+------------------------------------------------------------------+
//| Custom Position Counting Functions                              |
//+------------------------------------------------------------------+
int CountPositions(int position_type)
{
   int count = 0;
   for(int i=PositionsTotal()-1; i>=0; i--)
   {
      ulong ticket = PositionGetTicket(i);
      if(PositionGetString(POSITION_SYMBOL) == _Symbol && 
         PositionGetInteger(POSITION_MAGIC) == MagicNumber &&
         PositionGetInteger(POSITION_TYPE) == position_type)
      {
         count++;
      }
   }
   return count;
}

bool HasOpenPosition(int position_type)
{
   return CountPositions(position_type) > 0;
}

//+------------------------------------------------------------------+
//| Risk Management Functions                                        |
//+------------------------------------------------------------------+
double CalculateLotSize(double sl_pips)
{
   double balance = AccountInfoDouble(ACCOUNT_BALANCE);
   double risk_amount = balance * RiskPercent / 100.0;
   double tick_value = SymbolInfoDouble(_Symbol, SYMBOL_TRADE_TICK_VALUE);
   double lot = risk_amount / (sl_pips / SymbolInfoDouble(_Symbol, SYMBOL_POINT) * tick_value);
   return NormalizeDouble(lot, 2);
}

bool IsWithinTradingHours()
{
   MqlDateTime dt;
   TimeToStruct(TimeCurrent(), dt);
   return (dt.hour >= TradingStartHour && dt.hour < TradingEndHour);
}
